require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe PaymentsController, type: :controller do
  include Devise::Test::ControllerHelpers

  # This should return the minimal set of attributes required to create a valid
  # Payment. As you add validations to Payment, be sure to
  # adjust the attributes here as well.
  let(:signed_in_user) { FactoryGirl.create(:user) }

  before do
    # stub a method on ApplicationController
    sign_in signed_in_user
    # allow_any_instance_of(ApplicationController).to receive(:current_user).and_return(signed_in_user)
  end

  describe "GET #index" do
    it "populates an array of payments" do
      payments = Payment.order(ends_at: :asc).page(1)
      get :index
      expect(assigns(:payments)).to eq payments
    end
  end

  # describe "GET #show" do
  #   it "returns a success response" do
  #     payment = Payment.create! valid_attributes
  #     get :show, params: {id: payment.to_param}, session: valid_session
  #     expect(response).to be_success
  #   end
  # end

  # describe "GET #new" do
  #   it "returns a success response" do
  #     get :new, params: {}, session: valid_session
  #     expect(response).to be_success
  #   end
  # end

  # describe "GET #edit" do
  #   it "returns a success response" do
  #     payment = Payment.create! valid_attributes
  #     get :edit, params: {id: payment.to_param}, session: valid_session
  #     expect(response).to be_success
  #   end
  # end

  # describe "POST #create" do
  #   it 'creates a payment with valid starts_at and ends_at fields' do
  #     last_payment = FactoryGirl.create(:payment)
  #     expected_payment = FactoryGirl.create(:payment,
  #                                           starts_at: DateTime.new(2018, 4, 20),
  #                                           ends_at: DateTime.new(2018, 5, 4))
  #
  #     post :create
  #     expect(assigns(:payment)).to eq expected_payment
  #   end
  # end

  describe "private #form_next_payment_datetime" do
    it 'returns correct next_payment_datetime' do
      last_payment_ends_at = DateTime.new(2018, 4, 4) # Apr 4th, 2018
      expected_next_payment_datetime = DateTime.new(2018, 4, 5) # Apr 4th, 2018
      next_payment_datetime = PaymentsController.new.send :form_next_payment_datetime, last_payment_ends_at
      expect(next_payment_datetime).to eq expected_next_payment_datetime

      last_payment_ends_at = last_payment_ends_at.change(day: 19)
      expected_next_payment_datetime = expected_next_payment_datetime.change(day: 20)
      next_payment_datetime = PaymentsController.new.send :form_next_payment_datetime, last_payment_ends_at
      expect(next_payment_datetime).to eq expected_next_payment_datetime
    end
  end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }
  #
  #     it "updates the requested payment" do
  #       payment = Payment.create! valid_attributes
  #       put :update, params: {id: payment.to_param, payment: new_attributes}, session: valid_session
  #       payment.reload
  #       skip("Add assertions for updated state")
  #     end
  #
  #     it "redirects to the payment" do
  #       payment = Payment.create! valid_attributes
  #       put :update, params: {id: payment.to_param, payment: valid_attributes}, session: valid_session
  #       expect(response).to redirect_to(payment)
  #     end
  #   end
  #
  #   context "with invalid params" do
  #     it "returns a success response (i.e. to display the 'edit' template)" do
  #       payment = Payment.create! valid_attributes
  #       put :update, params: {id: payment.to_param, payment: invalid_attributes}, session: valid_session
  #       expect(response).to be_success
  #     end
  #   end
  # end

  describe "DELETE #destroy" do
    it "destroys the requested payment"

    it "redirects to the payments list"
  end

end
